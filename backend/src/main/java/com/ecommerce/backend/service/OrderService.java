package com.ecommerce.backend.service;

import com.ecommerce.backend.model.CartItem;
import com.ecommerce.backend.model.Order;
import com.ecommerce.backend.model.OrderItem;
import com.ecommerce.backend.model.OrderStatus;
import com.ecommerce.backend.model.User;
import com.ecommerce.backend.repository.CartItemRepository;
import com.ecommerce.backend.repository.OrderRepository;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * ‚úÖ OrderService ‚Äî Sipari≈ü i≈ülemlerini y√∂neten servis katmanƒ±.
 * - Sipari≈ü olu≈üturma
 * - Sipari≈ü g√∂r√ºnt√ºleme
 * - Sipari≈ü durumunu g√ºncelleme i≈ülemlerini i√ßerir.
 */
@Service
public class OrderService {

    private final OrderRepository orderRepository;
    private final CartItemRepository cartItemRepository;

    public OrderService(OrderRepository orderRepository,
                        CartItemRepository cartItemRepository) {
        this.orderRepository = orderRepository;
        this.cartItemRepository = cartItemRepository;
    }

    /**
     * 1Ô∏è‚É£ Sepetteki √ºr√ºnlerle sipari≈ü olu≈üturur.
     * - Sepet bo≈üsa hata fƒ±rlatƒ±r.
     * - √úr√ºnler `OrderItem` nesnesine d√∂n√º≈üt√ºr√ºl√ºp yeni sipari≈üe eklenir.
     * - `OrderStatus` varsayƒ±lan olarak `PENDING` atanƒ±r.
     */
    public Order createOrderFromCart(User user) {
        List<CartItem> cartItems = cartItemRepository.findByUser(user);
        if (cartItems.isEmpty()) {
            throw new RuntimeException("Sepet bo≈ü, sipari≈ü olu≈üturulamaz.");
        }

        List<OrderItem> orderItems = new ArrayList<>();
        double totalPrice = 0.0;

        for (CartItem cartItem : cartItems) {
            OrderItem item = new OrderItem();
            item.setProductName(cartItem.getProduct().getName());
            item.setQuantity(cartItem.getQuantity());
            item.setUnitPrice(cartItem.getProduct().getPrice());
            item.setOrder(null); // ge√ßici olarak null, sonra set edilir
            orderItems.add(item);
            totalPrice += item.getTotalPrice();
        }

        Order order = new Order();
        order.setUser(user);
        order.setCustomerName(user.getFullName());
        order.setItems(orderItems);
        order.setTotalPrice(totalPrice);
        order.setStatus(OrderStatus.PENDING); // üîÅ STATUS = PENDING

        for (OrderItem item : orderItems) {
            item.setOrder(order);
        }

        return orderRepository.save(order);
    }

    /**
     * 2Ô∏è‚É£ Kullanƒ±cƒ±nƒ±n t√ºm sipari≈ü ge√ßmi≈üini getirir.
     */
    public List<Order> getAllOrders(User user) {
        return orderRepository.findByUser(user);
    }

    /**
     * 3Ô∏è‚É£ Kullanƒ±cƒ±nƒ±n belirli bir sipari≈üini d√∂ner.
     * Sadece o kullanƒ±cƒ±ya aitse d√∂ner, aksi halde hata verir.
     */
    public Order getOrderById(Long id, User user) {
        return orderRepository.findByIdAndUser(id, user)
                .orElseThrow(() -> new RuntimeException("Sipari≈ü bulunamadƒ±."));
    }

    /**
     * 4Ô∏è‚É£ (Admin i√ßin) Sipari≈üi ID ile getirir. Kullanƒ±cƒ± kontrol√º yapƒ±lmaz.
     */
    public Order getOrderById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Sipari≈ü bulunamadƒ±."));
    }

    /**
     * 5Ô∏è‚É£ Sipari≈üi g√ºnceller (√∂rn: status deƒüi≈üikliƒüi, adres g√ºncellemesi, vs.).
     */
    public Order saveOrder(Order order) {
        return orderRepository.save(order);
    }

    /**
     * 6Ô∏è‚É£ Belirli bir kullanƒ±cƒ±ya ait ve belirli bir duruma sahip sipari≈üleri getirir.
     * √ñrn: PENDING sipari≈üleri listelemek i√ßin.
     */
    public List<Order> getOrdersByStatus(User user, OrderStatus status) {
        return orderRepository.findByUserAndStatus(user, status);
    }
}